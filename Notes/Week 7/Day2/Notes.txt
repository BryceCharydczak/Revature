SOAP

Service Oriented Architecture: a way of creating software where applications are communicating in a standard way across the Internet.


REST: 
    - No impliciet documentation
    - Any data format (xml, json, etc)
    - lightweight
    - cached
    - accessed through url endpoint + httpverbs
    - http 
    - not contract based

SOAP: Simple Object Access Protocol
    - contract based
    - only uses xml data format
    - heavier protocol than REST
    - accessed through a service endpoint interface
    - not tied to any particular protocol
    - we use http but you dont have to (smtp, ftp, etc, all viable)


SOAP = converting our objects to xml and transportin them in a SOAP message
    1. Envelope(Required) - defines where a soap message begins/end
    2. Header(Optional) - defines additional attributes that are associated with the message
    3. Body(Required) - contains the xml data of the message
    4. Fault(Optional) - describes whats going on whenever we have some sort of error with our message processing
        - Only applies to http status codes in the 500's

        SOAP Message Fault:
            1. Fault Code - indicates the class of error
            2. Fault String - text describing the error
            3. Fault Actor - which node caused the error
            4. Details - application specific details about what caused the error


SOAP Header/Body != HttpRequestHeader/Body
Entirety of the SOAP message will be in the request/response body (POST)
Client != Browser
    - Prevelant in business to business communication (no browser involved)




SOAP Contract : Web Services Description Language (WSDL)
    - language agnostic xml document which defines the structure of a SOAP web service

Creating a SOAP Service:
    1. Contract first (Top Down) approach
        + WSDL is created before the java application
        + The java application is then structure around the definition provided in the WSDL
    2. Contract last (bottom up) approach
        + java application is created first and then our WSDL is generated based on the application code 



WSDL Tags:
    <definitions> - root tag, define the name of the service along with any relevant namespaces or schemas
    <types> - define our complex types used in the serivce. Conform to a user defined XSD (xml schema definition)
    <message> - abstract definition of the data being communicated (usually going to correspond with operations)
    <operation> - defines what actions are available within the service (represents service methods)
    <portType> - define service along with each operation the client can perform, and the messages associated with it
    <binding> - specifies the SOAP binding style + protocol (http in our case)
        + Soap Binding Styles:
            - how the body of our SOAP body is formatted.
            - how our WSDL translates to our SOAP message
        Styles:
            1. Document - no specific formattin rules, can contain whatever the sender/reciever agree upon
            2. RPC (remote procedure call) - SOAP body contains an xml representation of the method and any parameters involved
        Models:
            1. Literal - contents conform to XSD - easier to translate and validate
            2. Encoded - contents do not need to conform to an XSD making it harder to translate and validate.

        ** All this means is that there are 4 distinct ways to bind our SOAP message**
            + Document Literal (most used)
            + Document Encoded (not really used)
            + RPC Literal (not really used)
            + RPC Encoded (sometimes used)

    <service> - specifies a collection of network endpoints exposed to web-based protocols
    <ports - specifies the address or connection point of a web service (generally an http URL string)



Java Implementation of SOAP Binding Styles:

    JAX-B = marshalling/unmarshalling
    JAX-WS = APACHE CXF (Implementation of JAX-WS)





Exposing a SOAP Web Service
    1. package application as a .war + include spring MVC dependencies and APACHE CXF dependencies
    2. web.xml define CXF Servlet 
    3. beans.xml include schema definitions/namespaces
    4. create an interface annotated with @WebService which includes all of our service methods
    5. create an implementing class which specifies the behavior of these service methods.
    6. register our Service implementation endpoint in our beans.xml
        <jaxws:endpoing id=".."
         implementor=".."
         address=".."></jaxws:endpoint>
    7. run our application on tomcat
     ~~~~~~~~~SOAP service is exposed~~~~~~~~~



Consuming a SOAP Service with a Java Application
    1. include Apache CXF dependencies in our pom 
    2. create the same models (pojos) as are defined in the SOAP service - these are the complex types defined in the WSDL
    3. create an interface which declares all of the service methods - found in our operation tags in our WSDL
        - don't provide any implementing class, just interface with @WebService
        Interface with @WebService
        - also want to declare exceptions (no need for implementation here either)
    4. JaxWSProxyFactoryBean - object is used to interact with our service 
        - set interface and endpoint url
        - invoke its create() method
    5. Client is able to use service methods
    ~~~~~~~~~~~Service is consumed~~~~~~~~~~~~~~~


Web Service Protocol Stack
    - 4 layers of protocols used to design, discover, and implement Web Services

    1. Transfer Protocol - responsible for moving our messages between our applications
    2. Messaging Protocol - how our messages will be encoded so they can be understood by both the service and client (XML, SOAP)
    3. Description Protocol - specifies how we describe our service (WSDL)
    4. Discovery Protocol - UDDI, a specification for centralizing services in a directory Universal Discovery Description and Integration